# Maintainer: Piotr Gorski <sir_lucjan@bridgelinux.pl>
# Contributor: Piotr Gorski <sir_lucjan@bridgelinux.pl>


### PATCH AND BUILD OPTIONS
# Set these variables to ANYTHING (yes or no or 1 or 0 or "I like icecream") to enable them
_makenconfig=		# tweak kernel options prior to a build via nconfig
_localmodcfg=		# compile ONLY probed modules
_use_current=		# use the current kernel's .config file
_NUMA_off=yes		# Disable NUMA in kernel config
#MAKEFLAGS=

pkgname=linux-bridge-pl
true && pkgname=(linux-bridge-pl linux-bridge-pl-headers)
_kernelname=-manjaro-pl
_srcname=linux-3.11
pkgver=3.11.7
pkgrel=15
arch=('i686' 'x86_64')
url="http://bridgelinux.pl"
license=('GPL2')
options=('!strip')
provides=('linux=3.11.7')
makedepends=('kmod' 'inetutils' 'bc')
_uksmvernel="0.1.2.2"
_uksmname="v3.10"
_bfspatch="3.11-sched-bfs-442.patch"
_bfqpath="http://algogroup.unimo.it/people/paolo/disk_sched/patches/3.11.0-v6r2"
_bfsrel=442
_gcc_patch="kernel-311-gcc48-1.patch"

source=("http://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        "http://kerneldedup.org/download/uksm/${_uksmvernel}/uksm-${_uksmvernel}-for-${_uksmname}.patch"
        "http://ck.kolivas.org/patches/bfs/3.0/3.11/${_bfspatch}"
        "${_bfqpath}/0001-block-cgroups-kconfig-build-bits-for-BFQ-v6r2-3.11.patch"
        "${_bfqpath}/0002-block-introduce-the-BFQ-v6r2-I-O-sched-for-3.11.patch"
        "${_bfqpath}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-v6r2-for-3.11.0.patch"
         "http://repo-ck.com/source/gcc_patch/${_gcc_patch}.gz"
        'linux-bridge-pl.preset'
        'change-default-console-loglevel.patch'
        '3.11-haswell-intel_pstate.patch'
        'criu-no-expert.patch'
        'config'
        'config.x86_64')
        
prepare() {
    cd "${srcdir}/${_srcname}"

    ### add upstream patch
    msg "Patching kernel patch"
    patch -Np1 -i "${srcdir}/patch-${pkgver}"

    ### set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
    # remove this when a Kconfig knob is made available by upstream
    msg "Patching set DEFAULT_CONSOLE_LOGLEVEL to 4"
    patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  # allow criu without expert option set
    # patch from fedora
    patch -Np1 -i "${srcdir}/criu-no-expert.patch"

    # add intel haswell support to intel_pstate
    # https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/patch/?id=6cdcdb793791f776ea9408581b1242b636d43b37
    # will be in 3.12
    patch -Np1 -i "${srcdir}/3.11-haswell-intel_pstate.patch"


    ### Patch source with UKSM
    msg "Patching with UKSM"
    patch -Np1 -i "${srcdir}/uksm-${_uksmvernel}-for-${_uksmname}.patch"

# Patch source to enable more gcc CPU optimizatons via the make nconfig
	patch -Np1 -i "${srcdir}/${_gcc_patch}"


# Patch source with BFS patches
  msg "Patching source with BFS patches"
  patch -Np1 -i "${srcdir}/${_bfspatch}"

  if [ "${_USE_BFQ_IOSCHED}" = "y" ]; then
    # Patch with BFQ IO Scheduler
    msg "Patching source with BFQ patches"
    for _bfqpatch in $(ls ${srcdir}/000{1,2,3}-block*.patch); do
      patch -Np1 -i "${_bfqpatch}"
    done
  fi



    ### Clean tree and copy ARCH config over
    msg "Running make mrproper to clean source tree"
    make mrproper

    if [ "${CARCH}" = "x86_64" ]; then
	cat "${srcdir}/config.x86_64" > ./.config
    else
	cat "${srcdir}/config" > ./.config
    fi

    ### Optionally use running kernel's config
    if [ -n "$_use_current" ]; then
	if [[ -s /proc/config.gz ]]; then
	    msg "Extracting config from /proc/config.gz..."
	    # modprobe configs
	    zcat /proc/config.gz > ./.config
	else
	    warning "You kernel was not compiled with IKCONFIG_PROC!"
	    warning "You cannot read the current config!"
	    warning "Aborting!"
	    exit
	fi
    fi

    if [ "${_kernelname}" != "" ]; then
	sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
	sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
    fi

    # disable NUMA since 99.9% of users do not have multiple CPUs but do have multiple cores in one CPU
    if [ -n "$_NUMA_off" ]; then
	if [ "${CARCH}" = "x86_64" ]; then
	    sed -i -e 's/CONFIG_NUMA=y/# CONFIG_NUMA is not set/' \
		    -i -e '/CONFIG_AMD_NUMA=y/d' \
		    -i -e '/CONFIG_X86_64_ACPI_NUMA=y/d' \
		    -i -e '/CONFIG_NODES_SPAN_OTHER_NODES=y/d' \
		    -i -e '/# CONFIG_NUMA_EMU is not set/d' \
		    -i -e '/CONFIG_NODES_SHIFT=6/d' \
		    -i -e '/CONFIG_NEED_MULTIPLE_NODES=y/d' \
		    -i -e '/CONFIG_USE_PERCPU_NUMA_NODE_ID=y/d' \
		    -i -e '/CONFIG_ACPI_NUMA=y/d' ./.config
	fi
    fi

    # set extraversion to pkgrel
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # don't run depmod on 'make install'. We'll do this ourselves in packaging
    sed -i '2iexit 0' scripts/depmod.sh
}

build() {
    cd "${srcdir}/${_srcname}"

    # get kernel version
    msg "Running make prepare for you to enable patched options of your choosing"
    make prepare

    ### Optionally load needed modules for the make localmodconfig
    if [ -n "$_localmodcfg" ]; then
	msg "If you have modprobe_db installed, running it in recall mode now"
	if [ -e /usr/bin/modprobed_db ]; then
	    [[ ! -x /usr/bin/sudo ]] && echo "Cannot call modprobe with sudo. Install via pacman -S sudo and configure to work with this user." && exit 1
	    sudo /usr/bin/modprobed_db recall
	fi
	msg "Running Steven Rostedt's make localmodconfig now"
	make localmodconfig
    fi

    if [ -n "$_makenconfig" ]; then
	msg "Running make nconfig"
	make nconfig
    fi
    
    msg "Running make bzImage and modules"
    make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-bridge-pl() {
    _Kpkgdesc='Linux Kernel and modules with the UKSM patchset and BFS scheduler'
    pkgdesc="${_Kpkgdesc}"
    depends=('coreutils' 'linux-firmware' 'mkinitcpio>=0.7')
    optdepends=('crda' 'nvidia-uksm' 'modprobed_db')
    provides=("linux-bridge-pl=${pkgver}" "linux=${pkgver}")
    conflicts=('kernel26-uksm')
    replaces=('kernel26-uksm')
    backup=("etc/mkinitcpio.d/linux-bridge-pl.preset")
    install=linux-bridge-pl.install

    cd "${srcdir}/${_srcname}"

    KARCH=x86

    # get kernel version
    _kernver="$(make LOCALVERSION= kernelrelease)"
    _basekernel=${_kernver%%-*}
    _basekernel=${_basekernel%.*}

    mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
    make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
    cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-linux-bridge-pl"

    # add vmlinux
    install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

    # set correct depmod command for install
    cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
    true && install=${install}.pkg
    sed \
    -e "s/KERNEL_NAME=.*/KERNEL_NAME=-bridge-pl/g" \
    -e "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${install}"

    # install mkinitcpio preset file for kernel
    install -D -m644 "${srcdir}/linux-bridge-pl.preset" "${pkgdir}/etc/mkinitcpio.d/linux-bridge-pl.preset"
    sed \
    -e "1s|'linux.*'|'linux-bridge-pl'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-linux-bridge-pl\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-linux-bridge-pl.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-linux-bridge-pl-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/linux-bridge-pl.preset"

    # remove build and source links
    rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
    # remove the firmware
    rm -rf "${pkgdir}/lib/firmware"
    # gzip -9 all modules to save 100MB of space
    find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
    # make room for external modules
    ln -s "../extramodules-${_basekernel}${_kernelname:bridge-pl}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
    # add real version for building modules and running depmod from post_install/upgrade
    mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:ukdm}"
    echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:bridge-pl}/version"

    # Now we call depmod...
    depmod -b "$pkgdir" -F System.map "$_kernver"

    # move module tree /lib -> /usr/lib
    mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux-bridge-pl-headers() {
    _Hpkgdesc='Header files and scripts to build modules for linux-bridge-pl.'
    pkgdesc="${_Hpkgdesc}"
    provides=("linux-bridge-pl-headers=${pkgver}" "linux-headers=${pkgver}")
    conflicts=('kernel26-uksm-headers')
    replaces=('kernel26-uksm-headers')

    install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

    cd "${pkgdir}/usr/lib/modules/${_kernver}"
    ln -sf ../../../src/linux-${_kernver} build

    cd "${srcdir}/${_srcname}"
    install -D -m644 Makefile \
	    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
    install -D -m644 kernel/Makefile \
	    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
    install -D -m644 .config \
	    "${pkgdir}/usr/src/linux-${_kernver}/.config"

    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

    for i in acpi asm-generic config crypto drm generated keys linux math-emu \
	    media net pcmcia scsi sound trace uapi video xen; do
	cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
    done

    # copy arch includes for external modules
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
    cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

    # copy files necessary for later builds, like nvidia and vmware
    cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
    cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

    # fix permissions on scripts dir
    chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

    cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

    if [ "${CARCH}" = "i686" ]; then
	    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
    fi

    cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

    # add headers for lirc package
    # pci
    for i in bt8xx cx88 saa7134; do
	    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
	    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
    done
    # usb
    for i in cpia2 em28xx pwc sn9c102; do
	    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
	    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
    done
    # i2c
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c"
    cp drivers/media/i2c/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
    for i in cx25840; do
	    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
	    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
    done

    # add docbook makefile
    install -D -m644 Documentation/DocBook/Makefile \
	    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

    # add dm headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
    cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

    # add inotify.h
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
    cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

    # add wireless headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
    cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

    # add dvb headers for external modules
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
    cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
    [[ -e include/config/dvb/ ]] && cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/" 

    # add dvb headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
    cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
    cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

    # add dvb headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
    cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
    cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
    cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

    # add xfs and shmem for aufs building
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
    cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

    # copy in Kconfig files
    for i in `find . -name "Kconfig*"`; do
	    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
	    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
    done

    chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
    find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

    # strip scripts directory
    find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
	    *application/x-sharedlib*) # Libraries (.so)
		    /usr/bin/strip ${STRIP_SHARED} "${binary}";;
	    *application/x-archive*) # Libraries (.a)
		    /usr/bin/strip ${STRIP_STATIC} "${binary}";;
	    *application/x-executable*) # Binaries
		    /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
    done

    # remove unneeded architectures
    rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc='Linux Kernel and modules with the UKSM patchset and BFS scheduler'


sha512sums=('b3680d3a45a7308383cf8634a7f1908e94f6e1c6d1cb587332a9418a95fb93bd3c73ab70c6976c7330508d7c8c6b0f43c2a9a2efde5fe1f76e9bfffb1de5686c'
            'd94257c3c0bbd42f70693172bad494400e0f1c07a6404062fbb6c6fb788e94c2920ea76d3b92eba40e389aa7f2164c14555a1757ef8fdd76827d3e10676a39d3'
            '41bc23f63e9cfbb50a2f8d3bebc453ead1c120e84a9399f4645111d92eb6851339c3416c5eca4ca94d665bd4bb42f387281b7ac6983c257c3249ef58aa6e638f'
            'c47d7e30b2045c490373b81ea8ad14cdd84b285c3d365882fe3f140ff073b1e01fe63b776f737ec25609af88e5adc2b39578534992a2d17a0e56fe1505945406'
            'e2f3838de142b9aded33ec1fad6d334d5b90b0249d9d4dd97c5403fb1610063697348a828254b101314912b87dda30b0d49e538d4e7962f4cb82d04e49e32039'
            '61045cc64952246677a0cee5aeda16969bc35bddb5a5725076d5e4591f8a2374bc0df8ea7ea2343a0af1a0aca2d9af4a138673827443db13e31eb05f52900da9'
            'c16f6541d44af10aa10d34f50bf5fd8bee998a3786cbe47e757d328cf921270b8ff4eb60367701d99b8d1354692e4bb159401dcbe0f3f3f48d29fcbf9568db85'
            '09c9b6303e3327310eb0c68891834a0541d4d99a01fd5d61bac30fca5fbbc618567e6b7b690c9f49f990fe14a6ad3109d36832fe5c22b795b3ee5ac56145f302'
            '796a262faa081a8a3decca67c734f989f1394aa2f0baad6dc0ce68aebd3994689726c6b301ead4174ecf86b50c5e40c22cffc8542282bbcef01aebd2526dcc85'
            '502192b5ce94c8254205f5ddb85bf50c5f1e78c768817b10dca3a7716a8c59d5e093842631acb51e3805cbf85522e0a9200942656f11bbb4ea1b7d61e24ddd78'
            '4797b26dc1424b51aca8005a83eea6ececeefabe3193d99f9add3ac4fe282dc2bf6b28a3dc8f6bbf93aa5c34812a1776fca970892f0320c028192a4b3d0284c8'
            'fc7b67bad612fdc67f9dd16886188d7bbfe3b8e65eb271672fcd888212e5b9e893c2eafef8070dd6113133b7a0a1a9c0dff90833080b452a2a530166e30587df'
            '5b425e1094a67eed1988830da8af53b58185b994d0fd2a6642038c5d0f27a3fb0725a2ae414237d45e31042cc9c049dd586ad185eefd25f02ebecbcbdd1291c0'
            'ff6960575730bfc1dfcbea1d21e75879e968094ee53c91feb5837841a2eb08c17793eb094f975a96e7285a7a7cf7f4d6e436755be2faf11904869b235dfd6523')
