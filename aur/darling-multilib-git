# Maintainer: X0rg

pkgname=darling-multilib-git
_gitname=darling
pkgver=591.b47e147
pkgrel=2
pkgdesc="A Wine-like emulation layer that enables you to run Darwin/OS X apps on Linux for multilib"
arch=('x86_64')
url="http://darling.dolezel.info/en/Darling"
license=('GPL3')
depends=('gcc-libs-multilib' 'libxml2' 'gnutls' 'icu' 'cairo' 'libjpeg-turbo' 'libpng' 'libtiff' 'libbsd' 'systemd' 'lcms' 'openssl' 'bzip2' 'util-linux' 'ncurses' 'libxrandr' 'ffmpeg' 
	'libkqueue' 'gnustep-make-clang-svn' 'gnustep-libobjc2-clang-svn' 'gnustep-base-clang-svn' 'gnustep-gui-clang-svn' 'gnustep-corebase-clang-svn'
	'lib32-libxml2' 'lib32-gnutls' 'lib32-icu' 'lib32-cairo' 'lib32-libjpeg-turbo' 'lib32-libpng' 'lib32-libtiff' 'lib32-libbsd' 'lib32-systemd' 'lib32-lcms' 'lib32-openssl' 'lib32-bzip2' 'lib32-util-linux' 'lib32-ncurses' 'lib32-libxrandr' 'lib32-ffmpeg' 
	'lib32-gnustep-make-clang-svn' 'lib32-gnustep-libobjc2-clang-svn' 'lib32-gnustep-base-clang-svn' 'lib32-gnustep-gui-clang-svn' 'lib32-gnustep-corebase-clang-svn')
makedepends=('git' 'clang>=3.1' 'nasm' 'yasm')
optdepends=('dmg2dir-git: extract OS X application from .dmg file')
provides=('darling-git')
conflicts=('darling-git')
backup=(etc/darling/dylib.conf)
install=darling.install
options=('!buildflags') #Don't remove, else 'dyld' will have a "core dumped".
source=('git://github.com/LubosD/darling.git')
#source=('git://github.com/crwulff/darling.git') #GitHub Fork, LubosD + others commits
#source=('git://github.com/X0rg/darling.git') #GitHub Fork, LubosD + add new librairies and frameworks 
md5sums=('SKIP')

pkgver() {
  cd $_gitname
  echo $(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

prepare() {
  cd $_gitname
  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Clone les submodules..."
  else
    msg2 "Clone submodules..."
  fi
  git submodule init
  git submodule update

  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Créé le dossier 'build'..."
  else
    msg2 "Create 'build' directory..."
  fi
  mkdir -pv ./build/{32,64}

  if [[ $(locale -a | grep french) == "french" ]];then

      if [[ $(cat /usr/include/unistd.h | grep block, | cut -c28-35) != "__block," ]];then msg2 "Le fichier '/usr/include/unistd.h' est correct !"
      else
      warning "Si vous ne modifiez pas le fichier '/usr/include/unistd.h', make va échouer !"
      msg2 "Il faut remplacer '__block' par '__block_hacked' pour corriger cela."
      msg2 "Voulez-vous corriger ceci automatiquement ? Le fichier de sauvegarde /usr/include/unistd.h.BAK sera créé. [O/n]"
      read -n 1 edit_file

      if [[ $edit_file == "n" ]];then error "Le fichier ne sera pas modifié. Make va échouer. Le paquet ne sera pas créé."
      else
        warning "Le fichier va être mis à jour automatiquement en utilisant sudo à vos propres risques !"
        (set -x ; sudo sed -i.BAK '/^extern void encrypt/ s/__block,/__block_hacked,/' /usr/include/unistd.h)
        msg2 "Le fichier '/usr/include/unistd.h' a été modifié."
      fi

    fi

  else

    if [[ $(cat /usr/include/unistd.h | grep block, | cut -c28-35) != "__block," ]];then msg2 "File '/usr/include/unistd.h' is OK !"
      else
      warning "If you don't edit the file '/usr/include/unistd.h', make would fail !"
      msg2 "It need to replace '__block' by '__block_hacked' to fix it."
      msg2 "Do you want to fix it automatically ? Backup file /usr/include/unistd.h.BAK will be created. [Y/n]"
      read -n 1 edit_file

      if [[ $edit_file == "n" ]];then error "File will be not modified. Make will fail. Package will not be created."
      else
        warning "File will be automatically updated using sudo at your own risks !"
        (set -x ; sudo sed -i.BAK '/^extern void encrypt/ s/__block,/__block_hacked,/' /usr/include/unistd.h)
        msg2 "File '/usr/include/unistd.h' has been modified."
      fi

    fi

  fi
}
 
build() {
  cd $_gitname/build

  source "/etc/profile.d/GNUstep32.sh"
  export PKG_CONFIG_PATH="/usr/lib32/pkgconfig"
  export LLVM_CONFIG="/usr/bin/llvm-config32"

  cd ./32
  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Exécute 'cmake' pour la version 32 bits..."
  else
    msg2 "Run 'cmake' to the 32-bit version..."
  fi
  CC="clang -m32" CXX="clang++ -m32" LDFLAGS="-L/opt/GNUstep32/lib32" cmake ../.. -DSUFFIX=32 -DCMAKE_INSTALL_PREFIX=/usr -Wno-dev

  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Exécute 'make' pour la version 32 bits..."
  else
    msg2 "Run 'make' to the 32-bit version..."
  fi
  make

  cd ../64
  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Exécute 'cmake' pour la version 64 bits..."
  else
    msg2 "Run 'cmake' to the 64-bit version..."
  fi
  CC=clang CXX=clang++ LDFLAGS="-L/usr/share/GNUstep/lib" cmake ../.. -DSUFFIX=64 -DCMAKE_INSTALL_PREFIX=/usr -Wno-dev

  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Exécute 'make' pour la version 64 bits..."
  else
    msg2 "Run 'make' to the 64-bit version..."
  fi
  make
}

package() {
  cd $_gitname/build/32
  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Installe la version 32 bits..."
  else
    msg2 "Install 32-bit version..."
  fi
  make DESTDIR=$pkgdir install

  cd ../64
  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Installe la version 64 bits..."
  else
    msg2 "Install 64-bit version..."
  fi
  make DESTDIR=$pkgdir install

  if [[ $(locale -a | grep french) == "french" ]];then msg2 "Crée les nouveaux exécutables..."
  else
    msg2 "Create new executables..."
  fi
  mkdir -v -p $pkgdir/usr/share/$pkgname
  mv -v $pkgdir/usr/bin/* $pkgdir/usr/share/$pkgname
  (set -x ; echo -e "#!/usr/bin/sh\n\nexport LD_LIBRARY_PATH=/opt/GNUstep32/lib32\n/usr/share/$pkgname/dyld32 \$@" > $pkgdir/usr/bin/dyld32)
  (set -x ; echo -e "#!/usr/bin/sh\n\nexport LD_LIBRARY_PATH=/usr/share/GNUstep/lib\n/usr/share/$pkgname/dyld64 \$@" > $pkgdir/usr/bin/dyld64)
  (set -x ; echo -e "#!/usr/bin/sh\n\nexport LD_LIBRARY_PATH=/usr/share/GNUstep/lib\n/usr/share/$pkgname/dyldd \$@" > $pkgdir/usr/bin/dyldd)
  (set -x ; echo -e "#!/usr/bin/sh\n\nexport LD_LIBRARY_PATH=/usr/share/GNUstep/lib\n/usr/share/$pkgname/motool \$@" > $pkgdir/usr/bin/motool)
  cat << 'EOF' > "$pkgdir/usr/bin/dyld"
#!/usr/bin/sh

if [[ $(file $@) == *x86_64* ]]; then
	echo -e "\t\t\033[1;44;37mDarling 64-bit\033[0m"
	export LD_LIBRARY_PATH=/usr/share/GNUstep/lib
	/usr/share/darling-multilib-git/dyld64 $@
elif [[ $(file $@) == *i386* ]]; then
	echo -e "\t\t\033[1;44;37mDarling 32-bit\033[0m"
	export LD_LIBRARY_PATH=/opt/GNUstep32/lib32
	/usr/share/darling-multilib-git/dyld32 $@
else
	echo -e "\t\t\033[1;44;37mDarling 64-bit\033[0m"
	export LD_LIBRARY_PATH=/usr/share/GNUstep/lib
	/usr/share/darling-multilib-git/dyld64 $@
fi
EOF
  chmod -v --reference=$pkgdir/usr/share/$pkgname/dyld64 $pkgdir/usr/bin/dyld
  chmod -v --reference=$pkgdir/usr/share/$pkgname/dyld64 $pkgdir/usr/bin/dyld64
  chmod -v --reference=$pkgdir/usr/share/$pkgname/dyld32 $pkgdir/usr/bin/dyld32
  chmod -v --reference=$pkgdir/usr/share/$pkgname/dyldd $pkgdir/usr/bin/dyldd
  chmod -v --reference=$pkgdir/usr/share/$pkgname/motool $pkgdir/usr/bin/motool
}