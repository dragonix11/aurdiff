# Maintainer:  Jordan Johnston <triplesquarednine@gmail.com>
# Contributor: Joakim Hernberg <jbh@alchemy.lu>
# Contributor: Ray Rashif <schiv@archlinux.org>
# Contributor: timbosa <tinny_tim@dodo.com.au>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

pkgbase=linux-l-pa
pkgname=('linux-l-pa' 'linux-l-pa-headers' 'linux-l-pa-docs') # Build realtime patched -l-pa kernel
#pkgname=linux-custom       # Build kernel with a different name
_kernelname=${pkgname#linux}
_basekernel=3.10
_releasever=14
_rtpatchver=rt9
pkgrel=1
_pkgver=${_basekernel}.${_releasever}
pkgver=${_basekernel}.${_releasever}_${_rtpatchver}
arch=('i686' 'x86_64')
url="http://rt.wiki.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v3.x/linux-${_basekernel}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v3.x/patch-${_pkgver}.xz"
        "https://www.kernel.org/pub/linux/kernel/projects/rt/${_basekernel}/patch-${_pkgver}-${_rtpatchver}.patch.xz"
        # the main kernel config files
        'config' 'config.x86_64'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        'change-default-console-loglevel.patch'
        'custom-flags-kernel.patch'
        'kernel-310-gcc48-2.patch'
        'enable_haswell_pstate_driver.patch'
        'criu-no-expert.patch'
        'logitech-dj.patch'
        '0A_ipc_rcu_alloc-cacheline_align_allocation.patch'
        '0B_ipc-sem-cacheline_align_semaphore_structures.patch'
        '0C_ipc-sem-seperate_wait-for-zero_alter_tasks_seperate_queues.patch'
        '0D_ipc-sem-Always_use_one_queue_4_alter_operations.patch'
        '0F_ipc-sem-Rename_try_atomic_semop_perform_atomic_semop.patch'
        '0G_move_acheline_aligned_in_smp.patch'
        '0H_cfq-iosched_limit_slice_idle_when_many_busy_que.patch'
        '0I_mutex_do_not_unnecessarily_deal_with_waiters.patch'
        '0J_optimize_strnlen_using_simd_instructions_V2.patch'
        '0K_sync_dont_block_the_flusher_thread_waiting_on_IO.patch'
        '01_mm-vmscan-fix_numa_reclaim_balance_in_kswapd.patch'
        '02_mm-page_alloc-rearrange_watermark_check_get_page_from_freelist.patch'
        '03_mm_page_alloc-fair_zone_allocator_policy.patch'
        '04_mm-page_alloc-vmstats_for_fairzone_allocation_batching_fix.patch'
        'mm_abort_reclaim_compation_if_compation_can_proceed.patch'
        'mm_limit_direct_reclaim_for_higher_order_allocations.patch'
)
        
md5sums=('4f25cd5bec5f8d5a7d935b3f2ccb8481'
         '3c2ce4933f210fef16664dfa16028de1'
         '303d1fbf2f5144628d67b65509325c52'
         'fc0ac8192b8e569fe666cb477fb2431c'
         '05095bc033411a3da8a4aec5cead754b'
         'eb14dcfd80c00852ef81ded6e826826a'
         'f3def2cefdcbb954c21d8505d23cc83c'
         '21e1d344b7762f53d829564f898e7d5e'
         '224687514007c64289126d269d95d5e4'
         '530a0ae904e1e4ffa129ceef83232ee4'
         'd50c1ac47394e9aec637002ef3392bd1'
         '3ff40ca684cfe719723e627e2cef7cea'
         '903de0fed82d8f50ca1dbe3d3fe6a2a1'
         '828933c2e8ead0ef75a2958a7313a0d8'
         'de186e0f77642155ac7ed3661158ee15'
         '43a1a67dc98e180c32e9a92b2567151d'
         '9b80bbccba802f7f038e6aa151c28d40'
         '2061a9ef02a1cb39aa4760a4bc36b897'
         '666acf88e63dc19780251d421ec9a4b7'
         'c82c5e33f6c6bfe515d0849504cddf6d'
         '40f6a250cd9d44a59fb83ef500e2615b'
         '49422f31ad327bf61863c4f33c16b335'
         '59407893ff4042d1a0c9088b24ac1fea'
         '5b5307c9178529055d14d653f61c7daa'
         'adc6a3318ef49ff94510f0c9f4ef5884'
         '67d93d929b081eed111e8b48e8edd30b'
         '5bcacf0e7bdc6d2bdc357973a5e3dcfd'
         '52c5860e4ad7d149757e5651e2c47f5d')

prepare() {
  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  msg "apply patch-${_pkgver}" 
  patch -p1 -i "${srcdir}/patch-${_pkgver}"

  msg "  ..    SUCCESS :)"

  if [ -n "$_pstates_pat" ]; then
          ### Patch source to enable pstate drivers with ivybridge CPUs
	  ### see https://plus.google.com/117091380454742934025/posts/2vEekAsG2QT
	  msg "Patching source to enable Intel Pstate driver for Haswell CPUs"
	  patch -Np1 -i "${srcdir}/enable_haswell_pstate_driver.patch"
  fi

  # allow criu without expert option set (patch from fedora)
  msg "applying criu-no-expert.patch"
  patch -Np1 -i "${srcdir}/criu-no-expert.patch"

  msg "  ..    SUCCESS :)"
	
  # fix FS#35991 - [linux] 3.10.x renders Logitech Unified Receivers useless
  msg "applying logitech-dj.patch"
  patch -Np1 -i  "${srcdir}/logitech-dj.patch"

  msg "  ..    SUCCESS :)"

  # add realtime patch
  msg "applying patch-${_pkgver}-${_rtpatchver}.patch"
  patch -p1 -i "${srcdir}/patch-${_pkgver}-${_rtpatchver}.patch"
  
  msg "  ..    SUCCESS :)"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  msg "applying change-default-console-loglevel.patch"
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  msg "  ..    SUCCESS :)"

  # add Custom Flag patch (Zen)
  msg "applying Custom flags patch"
  patch -Np1 -i "${srcdir}/custom-flags-kernel.patch" 

  msg "  ..    SUCCESS :)"

  # add kernel-310-gcc48-2.patch (Graysky / linux-ck repo)
  msg "applying kernel-310-gcc48-2.patch"
  patch -Np1 -i "${srcdir}/kernel-310-gcc48-2.patch"

  msg "  ..    SUCCESS :)"

  # add 0A_ipc_rcu_alloc-cacheline_align_allocation.patch
  msg "applying 0A_ipc_rcu_alloc-cacheline_align_allocation.patch"
  patch -Np1 -i "${srcdir}/0A_ipc_rcu_alloc-cacheline_align_allocation.patch" 

  msg "  ..    SUCCESS :)"

  # add 0B_ipc-sem-cacheline_align_semaphore_structures.patch
  msg "applying 0B_ipc-sem-cacheline_align_semaphore_structures.patch"
  patch -Np1 -i "${srcdir}/0B_ipc-sem-cacheline_align_semaphore_structures.patch" 

  msg "  ..    SUCCESS :)"

  # add 0C_ipc-sem-seperate_wait-for-zero_alter_tasks_seperate_queues.patch
  msg "applying 0C_ipc-sem-seperate_wait-for-zero_alter_tasks_seperate_queues.patch"
  patch -Np1 -i "${srcdir}/0C_ipc-sem-seperate_wait-for-zero_alter_tasks_seperate_queues.patch" 

  msg "  ..    SUCCESS :)"

  # add 0D_ipc-sem-Always_use_one_queue_4_alter_operations.patch
  msg "applying 0D_ipc-sem-Always_use_one_queue_4_alter_operations.patch"
  patch -Np1 -i "${srcdir}/0D_ipc-sem-Always_use_one_queue_4_alter_operations.patch" 

  msg "  ..    SUCCESS :)"

  # add 0F_ipc-sem-Rename_try_atomic_semop_perform_atomic_semop.patch
  msg "applying 0F_ipc-sem-Rename_try_atomic_semop_perform_atomic_semop.patch"
  patch -Np1 -i "${srcdir}/0F_ipc-sem-Rename_try_atomic_semop_perform_atomic_semop.patch" 

  msg "  ..    SUCCESS :)"

  # add 0G_move_acheline_aligned_in_smp.patch
  msg "applying 0G_move_acheline_aligned_in_smp.patch"
  patch -Np1 -i "${srcdir}/0G_move_acheline_aligned_in_smp.patch" 

  msg "  ..    SUCCESS :)"

  # add 0H_cfq-iosched_limit_slice_idle_when_many_busy_que.patch
  msg "applying 0H_cfq-iosched_limit_slice_idle_when_many_busy_que.patch"
  patch -Np1 -i "${srcdir}/0H_cfq-iosched_limit_slice_idle_when_many_busy_que.patch" 

  msg "  ..    SUCCESS :)"

  # add 0I_mutex_do_not_unnecessarily_deal_with_waiters.patch
  msg "applying 0I_mutex_do_not_unnecessarily_deal_with_waiters.patch"
  patch -Np1 -i "${srcdir}/0I_mutex_do_not_unnecessarily_deal_with_waiters.patch" 

  msg "  ..    SUCCESS :)"

  # add 0J_optimize_strnlen_using_simd_instructions_V2.patch
  msg "applying 0J_optimize_strnlen_using_simd_instructions_V2.patch"
  patch -Np1 -i "${srcdir}/0J_optimize_strnlen_using_simd_instructions_V2.patch" 

  msg "  ..    SUCCESS :)"

  # add 0K_sync_dont_block_the_flusher_thread_ waiting_ on_IO.patch
  msg "applying 0K_sync_dont_block_the_flusher_thread_ waiting_ on_IO.patch"
  patch -Np1 -i "${srcdir}/0K_sync_dont_block_the_flusher_thread_waiting_on_IO.patch" 

  msg "  ..    SUCCESS :)"

  msg "All patches have successfully been applied"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

#  if [ "${_kernelname}" != "" ]; then
#    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
#    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
#  fi

  # set extraversion to pkgrel
  #sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # set localversion to pkgrel-l-pa
  sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"-${pkgrel}${_kernelname}\"|g" ./.config

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null

  # save configuration for later reuse
  if [ "${CARCH}" = "x86_64" ]; then
    cat .config > "${startdir}/config.x86_64.last"
  else
    cat .config > "${startdir}/config.last"
  fi

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"; return 1
  ####################

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-l-pa() {
  pkgdesc="The Linux Kernel and modules (with realtime preemption) + L_Pa options"
  #groups=('base')
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=('linux-l-pa')
  conflicts=('linux-l-pa')
  replaces=('linux-l-pa')
  backup=("etc/mkinitcpio.d/${pkgname}.preset")
  install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"
#  _basekernel=${_kernver%%-*}
#  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgname}"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/" \
    -i "${startdir}/${pkgname}.install"
  sed \
    -e "1s|'linux.*'|'${pkgname}'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgname}\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgname}.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgname}-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:-l-pa}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:-l-pa}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:-l-pa}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux-l-pa-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel (with realtime preemption)."
  #provides=('kernel26-headers')
  #conflicts=('kernel26-headers')
  #replaces=('kernel26-headers')

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${pkgdir}/usr/lib/modules/${_kernver}"
  ln -sf ../../../src/linux-${_kernver} build

  cd "${srcdir}/linux-${_basekernel}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/src/linux-${_kernver}/.config"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
  cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

  # add headers for lirc package
  # pci
  for i in bt8xx cx88 saa7134; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
  done
  # usb
  for i in cpia2 em28xx pwc sn9c102; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
  done
  # i2c
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c"
  cp drivers/media/i2c/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
  for i in cx25840; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
  done

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

package_linux-l-pa-docs() {
  pkgdesc="Kernel hackers manual - HTML documentation that comes with the Linux kernel (with realtime preemption)."
  #provides=('kernel26-docs')
  #conflicts=('kernel26-docs')
  #replaces=('kernel26-docs')

  cd "${srcdir}/linux-${_basekernel}"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}"
  cp -al Documentation "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}" -type f -exec chmod 444 {} \;
  find "${pkgdir}" -type d -exec chmod 755 {} \;

  # remove a file already in linux package
  rm -f "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"
}

# workaround for AUR not accepting split packages
pkgname=linux-l-pa
pkgdesc="The Linux Kernel and modules (with realtime preemption) + L_Pa options."

# vim:set ts=8 sts=2 sw=2 et:
