# Maintainer: Spyhawk
# Contributor: Babets 
#
# Note about 64 bits support
# - Full 64 bits ET:Legacy clients can only connect to ET:Legacy servers.
# - For compatibility reason with W:ET 2.60b servers (32 bits), ET:Legacy should be cross-compiled for 32 bits.
# - Omni-Bot support requires 32 bits
# 32 bits cross-compilation
# - requires [multilib] enabled
# - requires multilib-devel
# other optional deps
# - (32 bits): 'openal' 'ncurses' 'freetype2'
# - (64 bits): 'lib32-openal' 'lib32-ncurses' 'lib32-freetype2'

LUA51=false
FULL64=false

pkgname=etlegacy
pkgver=2.71rc2
pkgrel=2
pkgdesc="Fully compatible client and server for the popular online FPS game Wolfenstein: Enemy Territory"
arch=('i686' 'x86_64')
url="http://www.etlegacy.com/"
license=('GPL3')
if [[ "$CARCH" == "i686" || "$FULL64" == 'true' ]]; then
    depends=('enemy-territory-data' 'alsa-plugins' 'curl' 'gcc-libs' 'glew' 'libjpeg' 'libsm' 'libvorbis' 'sdl')
    [[ "$LUA51" == 'true' ]] && depends+=('lua51') || depends+=('lua')
    optdepends=('libtxc_dxtn: S3 Texture Compression (S3TC) library for Mesa')
else
    depends=('enemy-territory-data' 'lib32-alsa-plugins' 'lib32-curl' 'lib32-gcc-libs' 'lib32-glew' 'lib32-libjpeg' 'lib32-libsm' 'lib32-libvorbis' 'lib32-sdl')
    [[ "$LUA51" == 'true' ]] && depends+=('lib32-lua51') || depends+=('lib32-lua')
    optdepends=('lib32-libtxc_dxtn: S3 Texture Compression (S3TC) library for Mesa')
fi
makedepends=('cmake' 'zip')
install=etlegacy.install
source=("https://github.com/etlegacy/$pkgname/archive/v$pkgver.tar.gz")
md5sums=('c289d46eaa3e79e6edbc70156d31260b')

build() {
    cd "$pkgname-$pkgver"

    # build type and path
    cmakeopts+=(
        '-D CMAKE_BUILD_TYPE="Debug"'
        '-D CMAKE_INSTALL_PREFIX=/usr'
        '-D INSTALL_DEFAULT_BASEDIR=/usr/share/etlegacy'
        '-D INSTALL_DEFAULT_BINDIR=bin'
        '-D INSTALL_DEFAULT_MODDIR=share/etlegacy'
    )

    # arch && cross-compilation
    if [[ "$CARCH" == "i686" || "$FULL64" == 'true' ]]; then
        cmakeopts+=(
            '-D CMAKE_LIBRARY_PATH=/usr/lib'
            '-D CROSS_COMPILE32=0'
        )
    else
        cmakeopts+=(
            '-D CMAKE_LIBRARY_PATH=/usr/lib32'
            '-D CROSS_COMPILE32=1'
        )
    fi

    # lua 5.1 (default is lua 5.2)
    if [[ "$LUA51" == 'true' ]]; then
        if [[ "$CARCH" == "i686" || "$FULL64" == 'true' ]]; then
            cmakeopts+=(
                '-D LUA_EXECUTABLE=/usr/bin/lua5.1'
                '-D LUA_LIBRARIES=/usr/lib/liblua5.1.so'
            )
        else
            cmakeopts+=(
                '-D LUA_EXECUTABLE=/usr/bin/lua5.132'
                '-D LUA_LIBRARIES=/usr/lib32/liblua5.1.so'
            )
        fi
        cmakeopts+=(
            '-D LUA_INCLUDE_DIR=/usr/include/lua5.1'
            '-D LUA_MATH_LIBRARY=m'
        )
    fi

    # options
    cmakeopts+=(
        '-D BUILD_SERVER=1'
        '-D BUILD_CLIENT=1'
        '-D BUILD_MOD=1'
        '-D PANDORA=0'
    )
    # packing
    cmakeopts+=(
        '-D BUILD_MOD_PK3=1'
        '-D BUILD_PAK3_PK3=1'
    )
    # bundled libs
    cmakeopts+=(
        '-D BUNDLED_LIBS=0'
        '-D BUNDLED_SDL=0'
        '-D BUNDLED_CURL=0'
        '-D BUNDLED_JPEG=0'
        '-D BUNDLED_LUA=0'
        '-D BUNDLED_OGG_VORBIS=0'
        '-D BUNDLED_GLEW=0'
    )
    # features
    cmakeopts+=(
        '-D FEATURE_CURL=1'
        '-D FEATURE_OGG_VORBIS=1'
        '-D FEATURE_OPENAL=0'
        '-D FEATURE_FREETYPE=0'
        '-D FEATURE_TRACKER=1'
        '-D FEATURE_LUA=1'
        '-D FEATURE_MULTIVIEW=0'
        '-D FEATURE_ANTICHEAT=1'
        '-D FEATURE_CURSES=0'
        '-D FEATURE_AUTOUPDATE=0'
        '-D FEATURE_RENDERER2=0'
        '-D FEATURE_IPV6=0'
        '-D FEATURE_IRC_CLIENT=0'
        '-D RENDERER_DYNAMIC=0'
        '-D FEATURE_WINDOWS_CONSOLE=0'
        '-D FEATURE_GETTEXT=1'
        '-D FEATURE_OMNIBOT=1'
        '-D INSTALL_OMNIBOT=0'
    )

    cmake ${cmakeopts[@]} .
    make
}

package() {
    cd "$pkgname-$pkgver"

    # files
    make DESTDIR="$pkgdir/" install

    # data files
    mkdir -p $pkgdir/usr/share/etlegacy/etmain
    ln -s /usr/share/enemy-territory/etmain/{mp_bin,pak0,pak1,pak2}.pk3 $pkgdir/usr/share/$pkgname/etmain/

    # doc and man pages
    mkdir -p $pkgdir/usr/share/{doc/$pkgname,man/man6}
    mv $pkgdir/usr/share/$pkgname/{README.md,COPYING.txt} $pkgdir/usr/share/doc/$pkgname/
    install -Dm 644 docs/game/anticheat.html $pkgdir/usr/share/doc/$pkgname/
    install -Dm 644 docs/linux/man/man6/{etl,etlded}.6 $pkgdir/usr/share/man/man6/

    # desktop file and icon
    mkdir -p $pkgdir/usr/share/{pixmaps,applications,mime/packages}
    install -Dm 644 misc/ETL.xpm $pkgdir/usr/share/pixmaps/etlegacy.xpm
    install -Dm 644 misc/etlegacy.desktop $pkgdir/usr/share/applications/
    install -Dm 644 misc/etlegacy.xml $pkgdir/usr/share/mime/packages/
}

# vim:set ts=4 sw=2 et:
