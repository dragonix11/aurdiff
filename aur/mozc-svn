# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

##
## Build configuration 
##
## You can choose the input method framework to use either ibus,
## uim and/or fcitx.
## If you will not be using ibus, comment out below.
_ibus_mozc="yes"

## If you will be using uim, uncomment below.
#_uim_mozc="yes"
## If applying patch for uim-mozc fails, try to uncomment below.
#_kill_kill_line="yes"
## This will disable the 'kill-line' function of uim-mozc.

## If you will be using fcitx, uncomment below.
#_fcitx_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## If you don't want to add Japanese zip code into dictionary,
## comment out below.
_zipcode="yes"

## Mozc compile option
_bldtype=Release
#_bldtype=Debug

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Japanese zip code data by Japan Post
# http://www.post.japanpost.jp/zipcode/download.html
#
# uim-mozc (macuim)
# http://code.google.com/p/macuim/
#
# fcitx-mozc
# http://code.google.com/p/fcitx/
# https://github.com/fcitx/mozc
#
#*************************************************************


pkgbase=mozc-svn
pkgname=mozc-svn
_svntrunk="http://mozc.googlecode.com/svn/trunk/src"
_svnmod=src


true && pkgname=('mozc-svn')
pkgver=182
pkgrel=1
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('BSD' 'GPL' 'custom')
makedepends=('pkg-config' 'python2' 'subversion' 'rsync')
changelog=ChangeLog
source=("${pkgbase}/${_svnmod}::svn+${_svntrunk}"
        'svn+http://src.chromium.org/svn/trunk/tools/depot_tools'
        mozc-el-byte-compile.patch
)
sha1sums=('SKIP'
          'SKIP'
          'c8cd7856bdabb8c32df12954642fc0df945dc665')

if [[ "$_ibus_mozc" == "yes" ]]; then
  true && pkgname+=('ibus-mozc-svn')
  makedepends+=('ibus>=1.4.1')
fi
if [[ "$_uim_mozc" == "yes" ]]; then
  true && pkgname+=('uim-mozc-svn')
  makedepends+=('uim')
  source+=('uim-mozc::svn+http://macuim.googlecode.com/svn/trunk/Mozc')
  sha1sums+=('SKIP')
fi
if [[ "$_fcitx_mozc" == "yes" ]]; then
  true && pkgname+=('fcitx-mozc-svn')
  makedepends+=('fcitx>=4.2.1' 'git')
  source+=('fcitx-mozc::git://github.com/fcitx/mozc.git')
  sha1sums+=('SKIP')
fi
if [[ "$_emacs_mozc" == "yes" ]]; then
  true && pkgname+=('emacs-mozc-svn')
  makedepends+=('emacs')
fi


pkgver() {
  cd "$_svnmod"
  svnversion | tr -d [A-z]
}


prepare() {
  cd "$srcdir"

  ln -sf `which python2` ./python
  PATH="${srcdir}:${srcdir}/depot_tools:${PATH}"

  # Checkout mozc
  cd "${SRCDEST}/${pkgbase}"
  msg "Running gclient..."
  [[ ! -f .gclient ]] && gclient config $_svntrunk
  gclient sync
  msg "Done."
  rsync -a --delete --exclude '/.svn' ./${_svnmod}/ "${srcdir}/${_svnmod}"

  cd "${srcdir}/${_svnmod}"

  # Patch for byte-compile of mozc.el by Fedora
  patch -p1 -i "${srcdir}/mozc-el-byte-compile.patch"

  if [[ "$_uim_mozc" == "yes" ]]; then
    cp -rf "${srcdir}/uim-mozc/uim" unix/

    # Adapt Mozc r178
    sed -i 's/:genproto_session#host/:session_protocol/' unix/uim/uim.gyp

    # kill-line patch
    [[ "$_kill_kill_line" != "yes" ]] && \
      patch -p0 -i "${srcdir}/uim-mozc/mozc-kill-line.diff"

    # Extract license part of uim-mozc
    head -n 32 unix/uim/mozc.cc > unix/uim/LICENSE
  fi

  if [[ "$_fcitx_mozc" == "yes" ]]; then
    cp -rf "${srcdir}/fcitx-mozc/src/unix/fcitx" unix/
  fi

  # Generate zip code dictionary seed
  if [[ "$_zipcode" == "yes" ]]; then
    msg "Generating zip code dic seed..."
    cd "$srcdir"
    for u in http://www.post.japanpost.jp/zipcode/dl/kogaki/zip/ken_all.zip \
             http://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip
    do
      _zipcodef=`basename $u`
      curl -fL --retry 3 --retry-delay 3 -O $u -z "${srcdir}/${_zipcodef}"
      bsdtar -xf $_zipcodef
    done

    python2 ${_svnmod}/dictionary/gen_zip_code_seed.py \
      --zip_code=KEN_ALL.CSV --jigyosyo=JIGYOSYO.CSV \
      >> ${_svnmod}/data/dictionary_oss/dictionary09.txt
    msg "Done."
  fi
}


build() {
  msg2 '====================================================='
  msg2 '               *** Build Info ***'
  msg2 ' The following package files will be generated:'
  for _p in ${pkgname[@]}
  do
    msg2 "  * ${_p}-${pkgver}-${pkgrel}-${CARCH}${PKGEXT}"
  done
  msg2 '====================================================='

  PATH="${srcdir}:${PATH}"

  # Use Qt4
  _rcc_loc=`pkg-config QtCore --variable=rcc_location`
  _qt4dir=${_rcc_loc%%/bin/rcc}
  _qt4i=`pkg-config --cflags-only-I QtGui`
  CFLAGS+=" $_qt4i"
  CXXFLAGS+=" $_qt4i"

  cd "${_svnmod}"

  msg "Starting make..."
  # Get make -j option from $MAKEFLAGS
  _jobs=`sed -n -e "s/.*--jobs=\([0-9]\+\).*/\1/p" -e "s/.*-j *\([0-9]\+\).*/\1/p" <<< "$MAKEFLAGS"`
  _jobs=${_jobs:-1}

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool "
  [[ "$_emacs_mozc" == "yes" ]] && _targets+="unix/emacs/emacs.gyp:mozc_emacs_helper "
  [[ "$_ibus_mozc"  == "yes" ]] && _targets+="unix/ibus/ibus.gyp:ibus_mozc renderer/renderer.gyp:mozc_renderer "
  [[ "$_uim_mozc"   == "yes" ]] && _targets+="unix/uim/uim.gyp:uim-mozc "
  [[ "$_fcitx_mozc" == "yes" ]] && _targets+="unix/fcitx/fcitx.gyp:fcitx-mozc "

  QTDIR=$_qt4dir GYP_DEFINES="document_dir=/usr/share/licenses/${pkgbase}" \
    python2 build_mozc.py gyp
  python2 build_mozc.py build_tools -c $_bldtype -j $_jobs
  python2 build_mozc.py build -c $_bldtype -j $_jobs $_targets

  [[ "$_ibus_mozc" == "yes" ]] && \
    sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' \
           out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml

  if [[ "$_emacs_mozc" == "yes" ]]; then
    cd unix/emacs
    emacs -batch -f batch-byte-compile mozc.el
    cd ~-
  fi

  # Extract liccense part of mozc
  head -n 29 server/mozc_server.cc > LICENSE
}


package_mozc-svn() {
  pkgdesc="A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input)"
  arch=('i686' 'x86_64')
  groups=('mozc-im-svn')
  depends=('qt4' 'zinnia')
  provides=('mozc')
  replaces=('mozc-server-svn' 'mozc-utils-gui-svn')
  conflicts=('mozc' 'mozc-server' 'mozc-utils-gui')
  optdepends=('tegaki-models-zinnia-japanese: hand-writing recognition support')

  cd "${_svnmod}"
  install -D -m 755 out_linux/${_bldtype}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install    -m 755 out_linux/${_bldtype}/mozc_tool   "${pkgdir}/usr/lib/mozc/mozc_tool"

  install -d "${pkgdir}/usr/share/licenses/${pkgbase}/"
  install -m 644 LICENSE data/installer/*.html "${pkgdir}/usr/share/licenses/${pkgbase}/"
}


package_emacs-mozc-svn() {
  pkgdesc="Mozc for Emacs"
  arch=('i686' 'x86_64')
  groups=('mozc-im-svn')
  depends=("mozc-svn=${pkgver}" 'emacs')
  install=emacs-mozc.install
  replaces=('emacs-mozc-bin')
  provides=('emacs-mozc')
  conflicts=('emacs-mozc' 'emacs-mozc-bin')

  cd "${_svnmod}"
  install -D -m 755 out_linux/${_bldtype}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
  install -d "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/"
  install -m 644 unix/emacs/mozc.el{,c} "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc"
}


package_ibus-mozc-svn() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im-svn')
  depends=("mozc-svn=${pkgver}" 'ibus>=1.4.1')
  provides=('ibus-mozc')
  conflicts=('ibus-mozc')

  cd "${_svnmod}"
  install -D -m 755 out_linux/${_bldtype}/ibus_mozc       "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"

  install -D -m 755 out_linux/${_bldtype}/mozc_renderer "${pkgdir}/usr/lib/mozc/mozc_renderer"
}


package_uim-mozc-svn() {
  pkgdesc="uim plugin module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im-svn')
  depends=("mozc-svn=${pkgver}" 'uim')
  install=uim-mozc.install
  provides=('uim-mozc')
  conflicts=('uim-mozc')

  cd "${_svnmod}"
  install -D -m 755 out_linux/${_bldtype}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "${pkgdir}/usr/share/uim"
  install    -m 644 ${srcdir}/uim-mozc/scm/*.scm       "${pkgdir}/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-tool.png       "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_selector.png"
  install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
  install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"

  install -D -m 644 unix/uim/LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/uim-mozc/LICENSE"
}


package_fcitx-mozc-svn() {
  pkgdesc="Fcitx module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im-svn')
  license=('GPL')
  depends=("mozc=${pkgver}" 'fcitx>=4.2.1')
  provides=('fcitx-mozc')
  conflicts=('fcitx-mozc')

  cd "${_svnmod}"
  for mofile in out_linux/${_bldtype}/obj/gen/unix/fcitx/po/*.mo
  do
      filename=`basename $mofile`
      lang=${filename/.mo/}
      install -D -m 644 "$mofile" "${pkgdir}/usr/share/locale/$lang/LC_MESSAGES/fcitx-mozc.mo"
  done

  install -D -m 755 out_linux/${_bldtype}/fcitx-mozc.so "${pkgdir}/usr/lib/fcitx/fcitx-mozc.so"
  install -D -m 644 unix/fcitx/fcitx-mozc.conf "${pkgdir}/usr/share/fcitx/addon/fcitx-mozc.conf"
  install -D -m 644 unix/fcitx/mozc.conf "${pkgdir}/usr/share/fcitx/inputmethod/mozc.conf"

  install -d "${pkgdir}/usr/share/fcitx/mozc/icon"
  install -m 644 data/images/product_icon_32bpp-128.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc.png"
  install -m 644 data/images/unix/ui-alpha_full.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-alpha_full.png"
  install -m 644 data/images/unix/ui-alpha_half.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-alpha_half.png"
  install -m 644 data/images/unix/ui-direct.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-direct.png"
  install -m 644 data/images/unix/ui-hiragana.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-hiragana.png"
  install -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-katakana_full.png"
  install -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-katakana_half.png"
  install -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-dictionary.png"
  install -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-properties.png"
  install -m 644 data/images/unix/ui-tool.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-tool.png"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input), with uim-mozc and fcitx-mozc (optional)"
depends=('qt4' 'zinnia')
license=('BSD' 'custom')
