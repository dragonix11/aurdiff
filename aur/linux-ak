# $Id$
# Maintainer: kovyale@gmail.com

pkgname=linux-ak
pkgbase=linux-ak
_srcname=linux-3.10
pkgver=3.10.10
pkgrel=2
pkgdesc="The Arch Linux $pkgver kernel and modules patched for bug blank screen on UEFI laptops with intel video i915 (zenbook HD4000). And disable changin backlight via acpi keys. Still available via X keys XF86MonBrightnessUp/Down. See PKGBUILD for more info"
# let it be controlled by user scripts via 
# /sys/class/backlight/intel_backlight/*, on zenbook use acpi_osi= 
# kernel paramenter to get Fn+F5 Fn+F6 accesible in X as XF86MonBrightnessUp
# and XF86MonBrightnessDown, Use example script XF86MonBrightness.sh to
# setup brightness. Or comment out the patch to get things usual way.
# You should have a script which sets wrting permissions to files that
# control brightness. See examples:
# XF86KbdBrightness.sh  XF86MonBrightness.sh  XF86TouchpadToggle.sh"

arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("http://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        # the main kernel config files
        'config' 'config.x86_64'
        # standard config files for mkinitcpio ramdisk
        'linux.preset'
        'change-default-console-loglevel.patch'
        'criu-no-expert.patch'
        'intel_dp-code-rearrangement.patch'
        'i915-disable-acpi-backlight-change.patch'
        '3.10.6-logitech-dj.patch'
        'XF86KbdBrightness.sh'
        'XF86MonBrightness.sh'
        'XF86TouchpadToggle.sh')
md5sums=('4f25cd5bec5f8d5a7d935b3f2ccb8481'
         'd010ef17d3e577fd1bdcb6887f2b9836'
         '09aad29932fe0d1aa765b314800db9a8'
         '5ffd739d5b3e7c68bf07472aaceca400'
         'eb14dcfd80c00852ef81ded6e826826a'
         'f3def2cefdcbb954c21d8505d23cc83c'
         'd50c1ac47394e9aec637002ef3392bd1'
         '47f1ca97cc4fc8131348e1b79102afb5'
         '7627942cf3c0e2ef91787b94aa3f4140'
         '3ff40ca684cfe719723e627e2cef7cea'
         '6320469c42ea445ca3a747c244b84419'
         '7079ab27c560185395a998f2577e2c57'
         '723900306cb607cb7b351dca4f1c2eb4')

_kernelname=${pkgbase#linux}

prepare() {
  cd "${srcdir}/${_srcname}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${pkgver}"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

  # code rearrangement patch https://bugzilla.kernel.org/show_bug.cgi?id=59841
  patch -Np1 -b -i "${srcdir}/intel_dp-code-rearrangement.patch"

  # disable changin backlight via acpi keys, let it be controlled by 
  # user scripts via /sys/class/backlight/intel_backlight/*
  # on zenbook use acpi_osi= kernel paramenter to get Fn+F5 Fn+F6 accesible
  # in X as XF86MonBrightnessUp and XF86MonBrightnessDown
  # Use example script XF86MonBrightness.sh to setup brightness
  # Or comment out this patch to get things usual way.
  patch -Np1 -b -i "${srcdir}/i915-disable-acpi-backlight-change.patch"

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  # allow criu without expert option set
  # patch from fedora
  patch -Np1 -i "${srcdir}/criu-no-expert.patch"
 
  # fix FS#35991 - [linux] 3.10.x renders Logitech Unified Receivers useless
  patch -Np1 -i  "${srcdir}/3.10.6-logitech-dj.patch"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {
  cd "${srcdir}/${_srcname}"

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null

  # save configuration for later reuse
  if [ "${CARCH}" = "x86_64" ]; then
    cat .config > "${startdir}/config.x86_64.last"
  else
    cat .config > "${startdir}/config.last"
  fi

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"; return 1
  ####################

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package() {
  [ "${pkgbase}" = "linux" ] && groups=('base')
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("kernel26${_kernelname}=${pkgver}")
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=linux.install

  cd "${srcdir}/${_srcname}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgbase}"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # set correct depmod command for install
  cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
  true && install=${install}.pkg
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/" \
    -i "${startdir}/${install}"

  # install mkinitcpio preset file for kernel
  install -D -m644 "${srcdir}/linux.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"
  sed \
    -e "1s|'linux.*'|'${pkgbase}'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgbase}\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initrd-${pkgbase}\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initrd-${pkgbase}-fallback\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

# vim:set ts=8 sts=2 sw=2 et:
